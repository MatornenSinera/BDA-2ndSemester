import pandas
import ast
import collections
import networkx as nx 
import matplotlib.pyplot as plt
import pydot
import random
import matplotlib.image as mpimg
from numpy import sqrt
import numpy as np
import time

## WARNING - CURRENT FILE WON'T COMPILE IF THERE ARE NO GRAPHS GENERATED BY THE graph_generation.py FILE.


## CUSTOM FUNCTIONS - DELETE RANDOM SAMPLE OF NODES OR DELETE FIRST X% OF NODES, SORTED BY THEIR DEGREE.

def RandomDeletion(G, proportion):
    ListOfNodes=G.nodes()
    NumberOfNodes=G.number_of_nodes()
    Sample=round(proportion*NumberOfNodes)
    RandomSample=random.sample(ListOfNodes, Sample)
    G.remove_nodes_from(RandomSample)
    return G

def MaxDeletion(G, proportion):
    ListOfNodes=sorted(G.degree, key=lambda x: x[1], reverse=True)
    NumberOfNodes=G.number_of_nodes()
    Sample=round(proportion*NumberOfNodes)
    MaxSample=[x[0] for x in ListOfNodes[:Sample]]
    G.remove_nodes_from(MaxSample)
    return G


## DEFINITION OF PARAMETERS

Probabilities=[float(x) for x in np.logspace(-2, -0.02, num=15)]
K=[4,10,20]
Sizes=[1000]


##TABLES STORING EACH AND EVERY DATASET USED IN FIGURES

GeneratedBarabasi=[[] for i in range(len(K))]
GeneratedGilbert=[[] for i in range(len(K))]
GeneratedWatts=[[] for i in range(len(K))]

##READING GRAPHS FROM .GML FILES

for k, i in zip(K, range(len(K))):
    for size in Sizes:
        print("Loading: "+str(k)+" "+str(size))
        H=nx.read_gml("Watts_"+str(k)+"_"+str(size)+".gml")
        GeneratedWatts[i].append(H)

i=99

## 6 SIMILAR CHUNKS OF CODE - GENERATING 3 FIGURES EACH

for GraphFamily, k in zip(GeneratedBarabasi, K):
    i+=1
    
    plt.figure(i)
    for G in GraphFamily:

        ## COLLECTING SIZE (NUMBER OF EDGES) FROM BASIC G GRAPH, AND COLLECTING RESULTS FROM MODIFIED GRAPHS INSIDE THE PF TABLE

        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:

            ## FOR COPY OF STUDIED GRAPH, APPLY THE RANDOM DEL/MAX DEL. FUNCTION

            G2=RandomDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)



    plt.title('Barabasi, Random: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')
 

for GraphFamily, k in zip (GeneratedGilbert, K):
    i+=1
    plt.figure(i)
    for G in GraphFamily:
        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:
            G2=RandomDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)
    plt.title('Gilbert, Random: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')


for GraphFamily, k in zip (GeneratedWatts, K):
    i+=1
    plt.figure(i)
    for G in GraphFamily:
        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:
            G2=RandomDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)
    plt.title('Watts, Random: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')

for GraphFamily, k in zip(GeneratedBarabasi, K):
    i+=1
    
    plt.figure(i)
    for G in GraphFamily:
        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:
            G2=MaxDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)
    plt.title('Barabasi, Max: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')
 

for GraphFamily, k in zip (GeneratedGilbert, K):
    i+=1
    plt.figure(i)
    for G in GraphFamily:
        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:
            G2=MaxDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)
    plt.title('Gilbert, Max: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')

for GraphFamily, k in zip (GeneratedWatts, K):
    i+=1
    plt.figure(i)
    for G in GraphFamily:
        giant = max(nx.connected_component_subgraphs(G), key=len)
        P0=giant.size()
        Pf=[]
        print (P0)
        for prob in Probabilities:
            G2=MaxDeletion(G.copy(), prob)
            giantreduced=max(nx.connected_component_subgraphs(G2), key=len)
            P1=giantreduced.size()
            Pf.append(float(P1/P0))
        plt.loglog(Probabilities, Pf)
    plt.title('Watts, Max: <k>='+str(k))
    plt.legend([str(i) for i in Sizes])
    plt.xlabel('Fraction of randomly deleted nodes.')
    plt.ylabel('P∞(f)/P∞(0)')
    plt.savefig(str(i)+'.png')
plt.show()

